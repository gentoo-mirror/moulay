diff -u libwm-1.0/libwm.c libwm/libwm.c
--- a/libwm.c	2015-11-16 09:56:09.000000000 -0500
+++ b/libwm.c	2019-05-23 12:48:57.801941227 -0400
@@ -109,6 +109,24 @@
 	return childnum;
 }
 
+xcb_window_t
+wm_get_focus(void)
+{
+	xcb_window_t w = 0;
+	xcb_get_input_focus_cookie_t c;
+	xcb_get_input_focus_reply_t *r;
+
+	c = xcb_get_input_focus(conn);
+	r = xcb_get_input_focus_reply(conn, c, NULL);
+	if (r == NULL)
+		return -1;
+
+	w = r->focus;
+	free(r);
+	return w;
+}
+
+
 int
 wm_get_attribute(xcb_window_t w, int attr)
 {
@@ -144,6 +162,34 @@
 }
 
 int
+wm_get_atom_string(xcb_window_t wid, xcb_atom_t atom, char **value)
+{
+	int len;
+	xcb_get_property_cookie_t cookie;
+	xcb_get_property_reply_t *reply;
+
+	cookie = xcb_get_property(conn, 0, wid, atom, XCB_ATOM_STRING, 0, 0);
+	reply = xcb_get_property_reply(conn, cookie, NULL);
+
+	if (reply == NULL) {
+		free(reply);
+		*value = NULL;
+		return 1;
+	}
+
+	len = xcb_get_property_value_length(reply);
+	*value = realloc(value, len);
+
+	if (value == NULL)
+		return 1;
+
+	*value = (char*)xcb_get_property_value(reply);
+	free(reply);
+
+	return 0;
+}
+
+int
 wm_get_cursor(int mode, uint32_t wid, int *x, int *y)
 {
 	xcb_query_pointer_reply_t *r;
@@ -236,7 +282,7 @@
 
 	if (!wm_is_mapped(wid) || wid == scrn->root)
 		return -1;
-	
+
 	curb = wm_get_attribute(wid, ATTR_B);
 	curx = wm_get_attribute(wid, ATTR_X);
 	cury = wm_get_attribute(wid, ATTR_Y);
@@ -246,9 +292,6 @@
 	if (mode == RELATIVE) {
 		x += curx;
 		y += cury;
-	} else  {
-		x -= curw;
-		y -= curh;
 	}
 
 	/* the following prevent windows from moving off the screen */
@@ -267,6 +310,18 @@
 }
 
 int
+wm_set_override(xcb_window_t w, int or)
+{
+	uint32_t mask = XCB_CW_OVERRIDE_REDIRECT;
+	uint32_t val[] = { or };
+
+	xcb_change_window_attributes(conn, w, mask, val);
+
+	return 1;
+}
+
+
+int
 wm_remap(xcb_window_t wid, int mode)
 {
 	switch (mode) {
@@ -294,7 +349,7 @@
 
 	if (!wm_is_mapped(wid) || wid == scrn->root)
 		return -1;
-	
+
 	curb = wm_get_attribute(wid, ATTR_B);
 	curx = wm_get_attribute(wid, ATTR_X);
 	cury = wm_get_attribute(wid, ATTR_Y);
@@ -344,3 +399,12 @@
 	xcb_flush(conn);
 	return 1;
 }
+
+int
+wm_reg_event(xcb_window_t wid, uint32_t mask)
+{
+	uint32_t val[] = { mask };
+
+	xcb_change_window_attributes(conn, wid, XCB_CW_EVENT_MASK, val);
+	return 0;
+}
diff -u libwm-1.0/wm.h libwm/wm.h
--- a/wm.h	2015-11-16 09:56:09.000000000 -0500
+++ b/wm.h	2019-05-23 12:48:57.801941227 -0400
@@ -92,6 +92,12 @@
 int wm_is_mapped(xcb_window_t wid);
 
 /*
+ * Fills the given pointer with the value of the atom for the given window
+ * Returns 1 if a value can't be retrieved
+ */
+int wm_get_atom_string(xcb_window_t wid, xcb_atom_t atom, char **value);
+
+/*
  * Get the first screen, and set the `scrn` global variable accordingly.
  */
 int wm_get_screen();
@@ -104,6 +110,12 @@
 int wm_get_windows(xcb_window_t wid, xcb_window_t **list);
 
 /*
+ * Get focused window identifier
+ * returns -1 on error
+ */
+xcb_window_t wm_get_focus(void);
+
+/*
  * Retrive the value of an attribute for a specific windows.
  * The possible values for the attributes are:
  * 	ATTR_W - width
@@ -143,6 +155,12 @@
 int wm_set_cursor(int x, int y, int mode);
 
 /*
+ * set override_redirect on window
+ * args:	wid, {0,1}
+ */
+int wm_set_override(xcb_window_t, int);
+
+/*
  * Teleport a window to the given position.
  */
 int wm_teleport(xcb_window_t wid, int w, int h, int x, int y);
@@ -185,4 +203,10 @@
  */
 int wm_restack(xcb_window_t wid, uint32_t mode);
 
+/*
+ * Register the given event(s) on the window.
+ * Multiple events can be registered by ORing them together
+ */
+int wm_reg_event(xcb_window_t wid, uint32_t mask);
+
 #endif /* __LIBWM_H__ */

